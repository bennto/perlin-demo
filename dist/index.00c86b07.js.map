{"mappings":"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","sources":["src/perlin.js"],"sourcesContent":["/*\r\n * A speed-improved perlin and simplex noise algorithms for 2D.\r\n *\r\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\r\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\r\n * Better rank ordering method by Stefan Gustavson in 2012.\r\n * Converted to Javascript by Joseph Gentle.\r\n *\r\n * Version 2012-03-09\r\n *\r\n * This code was placed in the public domain by its original author,\r\n * Stefan Gustavson. You may use it as you see fit, but\r\n * attribution is appreciated.\r\n *\r\n */\r\n\r\n(function(global){\r\n    var module = global.noise = {};\r\n  \r\n    function Grad(x, y, z) {\r\n      this.x = x; this.y = y; this.z = z;\r\n    }\r\n    \r\n    Grad.prototype.dot2 = function(x, y) {\r\n      return this.x*x + this.y*y;\r\n    };\r\n  \r\n    Grad.prototype.dot3 = function(x, y, z) {\r\n      return this.x*x + this.y*y + this.z*z;\r\n    };\r\n  \r\n    var grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\r\n                 new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\r\n                 new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\r\n  \r\n    var p = [151,160,137,91,90,15,\r\n    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\r\n    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\r\n    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\r\n    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\r\n    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\r\n    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\r\n    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\r\n    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\r\n    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\r\n    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\r\n    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\r\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\r\n    // To remove the need for index wrapping, double the permutation table length\r\n    var perm = new Array(512);\r\n    var gradP = new Array(512);\r\n  \r\n    // This isn't a very good seeding function, but it works ok. It supports 2^16\r\n    // different seed values. Write something better if you need more seeds.\r\n    module.seed = function(seed) {\r\n      if(seed > 0 && seed < 1) {\r\n        // Scale the seed out\r\n        seed *= 65536;\r\n      }\r\n  \r\n      seed = Math.floor(seed);\r\n      if(seed < 256) {\r\n        seed |= seed << 8;\r\n      }\r\n  \r\n      for(var i = 0; i < 256; i++) {\r\n        var v;\r\n        if (i & 1) {\r\n          v = p[i] ^ (seed & 255);\r\n        } else {\r\n          v = p[i] ^ ((seed>>8) & 255);\r\n        }\r\n  \r\n        perm[i] = perm[i + 256] = v;\r\n        gradP[i] = gradP[i + 256] = grad3[v % 12];\r\n      }\r\n    };\r\n  \r\n    module.seed(0);\r\n  \r\n    /*\r\n    for(var i=0; i<256; i++) {\r\n      perm[i] = perm[i + 256] = p[i];\r\n      gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\r\n    }*/\r\n  \r\n    // Skewing and unskewing factors for 2, 3, and 4 dimensions\r\n    var F2 = 0.5*(Math.sqrt(3)-1);\r\n    var G2 = (3-Math.sqrt(3))/6;\r\n  \r\n    var F3 = 1/3;\r\n    var G3 = 1/6;\r\n  \r\n    // 2D simplex noise\r\n    module.simplex2 = function(xin, yin) {\r\n      var n0, n1, n2; // Noise contributions from the three corners\r\n      // Skew the input space to determine which simplex cell we're in\r\n      var s = (xin+yin)*F2; // Hairy factor for 2D\r\n      var i = Math.floor(xin+s);\r\n      var j = Math.floor(yin+s);\r\n      var t = (i+j)*G2;\r\n      var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\r\n      var y0 = yin-j+t;\r\n      // For the 2D case, the simplex shape is an equilateral triangle.\r\n      // Determine which simplex we are in.\r\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n      if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n        i1=1; j1=0;\r\n      } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n        i1=0; j1=1;\r\n      }\r\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n      // c = (3-sqrt(3))/6\r\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n      var y1 = y0 - j1 + G2;\r\n      var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n      var y2 = y0 - 1 + 2 * G2;\r\n      // Work out the hashed gradient indices of the three simplex corners\r\n      i &= 255;\r\n      j &= 255;\r\n      var gi0 = gradP[i+perm[j]];\r\n      var gi1 = gradP[i+i1+perm[j+j1]];\r\n      var gi2 = gradP[i+1+perm[j+1]];\r\n      // Calculate the contribution from the three corners\r\n      var t0 = 0.5 - x0*x0-y0*y0;\r\n      if(t0<0) {\r\n        n0 = 0;\r\n      } else {\r\n        t0 *= t0;\r\n        n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\r\n      }\r\n      var t1 = 0.5 - x1*x1-y1*y1;\r\n      if(t1<0) {\r\n        n1 = 0;\r\n      } else {\r\n        t1 *= t1;\r\n        n1 = t1 * t1 * gi1.dot2(x1, y1);\r\n      }\r\n      var t2 = 0.5 - x2*x2-y2*y2;\r\n      if(t2<0) {\r\n        n2 = 0;\r\n      } else {\r\n        t2 *= t2;\r\n        n2 = t2 * t2 * gi2.dot2(x2, y2);\r\n      }\r\n      // Add contributions from each corner to get the final noise value.\r\n      // The result is scaled to return values in the interval [-1,1].\r\n      return 70 * (n0 + n1 + n2);\r\n    };\r\n  \r\n    // 3D simplex noise\r\n    module.simplex3 = function(xin, yin, zin) {\r\n      var n0, n1, n2, n3; // Noise contributions from the four corners\r\n  \r\n      // Skew the input space to determine which simplex cell we're in\r\n      var s = (xin+yin+zin)*F3; // Hairy factor for 2D\r\n      var i = Math.floor(xin+s);\r\n      var j = Math.floor(yin+s);\r\n      var k = Math.floor(zin+s);\r\n  \r\n      var t = (i+j+k)*G3;\r\n      var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\r\n      var y0 = yin-j+t;\r\n      var z0 = zin-k+t;\r\n  \r\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n      // Determine which simplex we are in.\r\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\r\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\r\n      if(x0 >= y0) {\r\n        if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\r\n        else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\r\n        else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\r\n      } else {\r\n        if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\r\n        else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\r\n        else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\r\n      }\r\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n      // c = 1/6.\r\n      var x1 = x0 - i1 + G3; // Offsets for second corner\r\n      var y1 = y0 - j1 + G3;\r\n      var z1 = z0 - k1 + G3;\r\n  \r\n      var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\r\n      var y2 = y0 - j2 + 2 * G3;\r\n      var z2 = z0 - k2 + 2 * G3;\r\n  \r\n      var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\r\n      var y3 = y0 - 1 + 3 * G3;\r\n      var z3 = z0 - 1 + 3 * G3;\r\n  \r\n      // Work out the hashed gradient indices of the four simplex corners\r\n      i &= 255;\r\n      j &= 255;\r\n      k &= 255;\r\n      var gi0 = gradP[i+   perm[j+   perm[k   ]]];\r\n      var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\r\n      var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\r\n      var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\r\n  \r\n      // Calculate the contribution from the four corners\r\n      var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\r\n      if(t0<0) {\r\n        n0 = 0;\r\n      } else {\r\n        t0 *= t0;\r\n        n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\r\n      }\r\n      var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\r\n      if(t1<0) {\r\n        n1 = 0;\r\n      } else {\r\n        t1 *= t1;\r\n        n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\r\n      }\r\n      var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\r\n      if(t2<0) {\r\n        n2 = 0;\r\n      } else {\r\n        t2 *= t2;\r\n        n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\r\n      }\r\n      var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\r\n      if(t3<0) {\r\n        n3 = 0;\r\n      } else {\r\n        t3 *= t3;\r\n        n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\r\n      }\r\n      // Add contributions from each corner to get the final noise value.\r\n      // The result is scaled to return values in the interval [-1,1].\r\n      return 32 * (n0 + n1 + n2 + n3);\r\n  \r\n    };\r\n  \r\n    // ##### Perlin noise stuff\r\n  \r\n    function fade(t) {\r\n      return t*t*t*(t*(t*6-15)+10);\r\n    }\r\n  \r\n    function lerp(a, b, t) {\r\n      return (1-t)*a + t*b;\r\n    }\r\n  \r\n    // 2D Perlin Noise\r\n    module.perlin2 = function(x, y) {\r\n      // Find unit grid cell containing point\r\n      var X = Math.floor(x), Y = Math.floor(y);\r\n      // Get relative xy coordinates of point within that cell\r\n      x = x - X; y = y - Y;\r\n      // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n      X = X & 255; Y = Y & 255;\r\n  \r\n      // Calculate noise contributions from each of the four corners\r\n      var n00 = gradP[X+perm[Y]].dot2(x, y);\r\n      var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\r\n      var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\r\n      var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\r\n  \r\n      // Compute the fade curve value for x\r\n      var u = fade(x);\r\n  \r\n      // Interpolate the four results\r\n      return lerp(\r\n          lerp(n00, n10, u),\r\n          lerp(n01, n11, u),\r\n         fade(y));\r\n    };\r\n  \r\n    // 3D Perlin Noise\r\n    module.perlin3 = function(x, y, z) {\r\n      // Find unit grid cell containing point\r\n      var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\r\n      // Get relative xyz coordinates of point within that cell\r\n      x = x - X; y = y - Y; z = z - Z;\r\n      // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n      X = X & 255; Y = Y & 255; Z = Z & 255;\r\n  \r\n      // Calculate noise contributions from each of the eight corners\r\n      var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\r\n      var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\r\n      var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\r\n      var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\r\n      var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\r\n      var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\r\n      var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\r\n      var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\r\n  \r\n      // Compute the fade curve value for x, y, z\r\n      var u = fade(x);\r\n      var v = fade(y);\r\n      var w = fade(z);\r\n  \r\n      // Interpolate\r\n      return lerp(\r\n          lerp(\r\n            lerp(n000, n100, u),\r\n            lerp(n001, n101, u), w),\r\n          lerp(\r\n            lerp(n010, n110, u),\r\n            lerp(n011, n111, u), w),\r\n         v);\r\n    };\r\n  \r\n  })(this);"],"names":[],"version":3,"file":"index.00c86b07.js.map","sourceRoot":"/__parcel_source_root/"}